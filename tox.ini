[tox]
minversion = 1.6
envlist = py35,py27,pypy,pep8
skipsdist = True

[wrs]
# This configuration assumes that the tox tests are being run directly within
# the build tree therefore the {toxinitdir} variable points to a path within
# the source tree.  For example:
#    {MY_REPO}/addons/wr-cgcs/layers/cgcs/git/neutron
#
wrsdir = {toxinidir}/../../../../../..
cgcsdir = {[wrs]wrsdir}/addons/wr-cgcs/layers/cgcs
deps = -e{[wrs]cgcsdir}/git/neutron
       -e{[wrs]cgcsdir}/git/neutron-dynamic-routing
       -e{[wrs]cgcsdir}/middleware/fault/recipes-common/fm-api
       -e{[wrs]cgcsdir}/middleware/sysinv/recipes-common/cgts-client/cgts-client
       -e{[wrs]cgcsdir}/middleware/config/recipes-common/tsconfig/tsconfig

[testenv]
usedevelop = True
install_command = {toxinidir}/tools/tox_install.sh {[wrs]cgcsdir} {env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/pike} {opts} {packages}
setenv =
   VIRTUAL_ENV={envdir}
   PYTHONWARNINGS=default::DeprecationWarning
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
       {[wrs]deps}
commands = {toxinidir}/tools/ostestr_compat_shim.sh {posargs}
           python {toxinidir}/tools/django-manage.py test bgpvpn_dashboard.test.api_tests.bgpvpn_tests

[testenv:releasenotes]
commands = sphinx-build -W -a -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:pep8]
deps =
    {[testenv]deps}
commands =
    flake8
    flake8 doc/source/samples
    pylint --version
    pylint --rcfile=.pylintrc --output-format=colorized {posargs:networking_bgpvpn}
    pylint --rcfile=.pylintrc --output-format=colorized doc/source/samples
    neutron-db-manage --subproject networking-bgpvpn --database-connection sqlite:// check_migration
    {[testenv:genconfig]commands}

[testenv:dsvm]
setenv = OS_FAIL_ON_MISSING_DEPS=1
         OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}

[testenv:functional]
setenv = {[testenv]setenv}
         OS_TEST_TIMEOUT=180
         OS_TEST_PATH=./networking_bgpvpn/tests/functional
         OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}
deps =
  {[testenv]deps}
  -r{toxinidir}/networking_bgpvpn/tests/functional/requirements.txt
commands =
  {toxinidir}/tools/ostestr_compat_shim.sh {posargs}

[testenv:dsvm-functional]
basepython = python2.7
setenv = {[testenv:functional]setenv}
         {[testenv:dsvm]setenv}
sitepackages=True
deps =
  {[testenv:functional]deps}
commands =
  {toxinidir}/tools/ostestr_compat_shim.sh {posargs}

# If you are running the tests locally you should set the env variable
# TEMPEST_CONFIG_DIR=/opt/stack/tempest/etc
[testenv:api]
sitepackages = True
passenv = TEMPEST_CONFIG_DIR
setenv =
 OS_TEST_PATH={toxinidir}/networking_bgpvpn_tempest/tests/api
 OS_TESTR_CONCURRENCY=1

# If you are running the tests locally you should set the env variable
# TEMPEST_CONFIG_DIR=/opt/stack/tempest/etc
[testenv:scenario]
sitepackages = True
passenv = TEMPEST_CONFIG_DIR
setenv =
 OS_TEST_PATH={toxinidir}/networking_bgpvpn_tempest/tests/scenario
 OS_TESTR_CONCURRENCY=1

[testenv:py27]
setenv = OS_FAIL_ON_MISSING_DEPS=0

[testenv:venv]
commands = {posargs}

[testenv:cover]
basepython = python2.7
commands =
    python setup.py test --coverage --coverage-package-name=networking_bgpvpn --omit="*/tests/*" --testr-args='{posargs}'
    coverage report --omit="*/tests/*" -m

[testenv:docs]
commands = python setup.py build_sphinx

[testenv:debug]
commands = oslo_debug_helper -t networking_bgpvpn/tests/unit {posargs}

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh

[flake8]
show-source = True
# E123, E125 skipped as they are invalid PEP-8.
# N530 direct neutron imports not allowed
ignore = E123,E125,N530,H405
builtins = _
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools,.tmp

[hacking]
local-check-factory = neutron_lib.hacking.checks.factory
